import random from "random"
import createFirmEmbed from '../utils/embed.js';
import fs from 'fs';

const { prefix } = JSON.parse(fs.readFileSync('./config.json'));

const coord2pos = {
    'a1': 0, 'a2': 1, 'a3': 2, 'a4': 3,
    'b1': 4, 'b2': 5, 'b3': 6, 'b4': 7,
    'c1': 8, 'c2': 9, 'c3': 10, 'c4': 11,
    'd1': 12, 'd2': 13, 'd3': 14, 'd4': 15
};

const treasures = [
    {
        name: "–£–¥–≤–∞–∏–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤",
        icon: "‚≠ê",
        score: 0
    },
    {
        name: "–í—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –∫–æ–∏–Ω—ã –æ–±–Ω—É–ª—è—é—Ç—Å—è",
        icon: "‚ò†Ô∏è",
        score: 0
    },
    {
        name: "+3 –∫–æ–∏–Ω–∞",
        icon: ":k_grape:",
        score: 3
    },
    {
        name: "+4 –∫–æ–∏–Ω–∞",
        icon: ":k_orange:",
        score: 4
    },
    {
        name: "+5 –∫–æ–∏–Ω–æ–≤",
        icon: ":k_cherry:",
        score: 5
    },
    {
        name: "+6 –∫–æ–∏–Ω–æ–≤",
        icon: ":k_clover:",
        score: 6
    },
    {
        name: "+7 –∫–æ–∏–Ω–æ–≤",
        icon: ":k_bell:",
        score: 7
    },
    {
        name: "+10 –∫–æ–∏–Ω–æ–≤",
        icon: ":k_diamond:",
        score: 10
    },
];

const missingTreasure = {
    name: "–ù–µ—Ç –∫–æ–∏–Ω–æ–≤",
    icon: ":white_square_button:",
    score: 0
};

function generateTreasureMap() {
    let positions = [...Array(16).keys()];
    let result = [];

    for (let i = 0; i < 8; ++i) {
        const pickedPos = random.choice(positions);
        positions = positions.filter(e => e != pickedPos);
        result.push(pickedPos);
    }

    return result;
}

function drawMap(treasureMap) {
    let drawnMap = [
        [":black_small_square:", ":regional_indicator_a:", ":regional_indicator_b:", ":regional_indicator_c:", ":regional_indicator_d:"],
        [":one:", ":white_square_button:", ":white_square_button:", ":white_square_button:", ":white_square_button:"],
        [":two:", ":white_square_button:", ":white_square_button:", ":white_square_button:", ":white_square_button:"],
        [":three:", ":white_square_button:", ":white_square_button:", ":white_square_button:", ":white_square_button:"],
        [":four:", ":white_square_button:", ":white_square_button:", ":white_square_button:", ":white_square_button:"],
    ]

    for (let i in treasureMap) {
        const pos = treasureMap[i];
        drawnMap[Math.floor(pos / 4) + 1][pos % 4 + 1] = treasures[i].icon;
    }

    return drawnMap.map(s => s.join(" ")).join("\n");
}

export default {
    name: 'th',
    category: '–ò–≥—Ä—ã',
    description: '—Å–∏–Ω–≥–ª–ø–ª–µ–µ—Ä–Ω—ã–π —Å—ã—â–∏–∫',
    verboseDescription: `–í–≤–µ–¥–∏ —Ä–∞–∑–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 4x4 —Å–µ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:
:k_diamond: ‚Äì –∞–ª–º–∞–∑, 10 –∫–æ–∏–Ω–æ–≤.
:k_bell: ‚Äì –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫, 7 –∫–æ–∏–Ω–æ–≤.
:k_clover: ‚Äì –∫–ª–µ–≤–µ—Ä, 6 –∫–æ–∏–Ω–æ–≤.
:k_cherry: ‚Äì –≤–∏—à–Ω—è, 5 –∫–æ–∏–Ω–æ–≤.
:k_orange: ‚Äì –∞–ø–µ–ª—å—Å–∏–Ω, 4 –∫–æ–∏–Ω–∞.
:k_grape: ‚Äì –≤–∏–Ω–æ–≥—Ä–∞–¥, 3 –∫–æ–∏–Ω–∞.
‚ò†Ô∏è ‚Äì —Å–º—ç—Ä—Ç—å, –æ–±–Ω—É–ª—è–µ—Ç –≤–æ–æ–±—â–µ –≤—Å–µ –∫–æ–∏–Ω—ã —é–∑–µ—Ä–∞.
‚≠ê ‚Äì —É–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–∏–Ω—ã`,
    args: [
        {
            name: '–∫1',
            description: '–ü–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤—ã (A, B, C, D) –∏ —Ü–∏—Ñ—Ä—ã (1, 2, 3, 4). –ù–∞–ø—Ä–∏–º–µ—Ä, A1, B2, C3, D4',
            required: true
        },
        {
            name: '–∫2',
            description: '–í—Ç–æ—Ä–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞, –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ',
            required: true
        },
        {
            name: '–∫3',
            description: '–¢—Ä–µ—Ç—å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞, –Ω—É —Ç—ã –ø–æ–Ω—è–ª',
            required: true
        }
    ],
    async execute(message, args) {
        if (args[0].match(/^[abcd][1234]$/) && 
            args[1].match(/^[abcd][1234]$/) && 
            args[2].match(/^[abcd][1234]$/)) {
            if (args[0] == args[1] || args[0] == args[2] || args[1] == args[2]) {
                message.reply(`–í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ`);
            }
            const treasureMap = generateTreasureMap();

            const coords = [coord2pos[args[0]], coord2pos[args[1]], coord2pos[args[2]]];

            const userState = message.client.db.data.userData[message.author.id] ?? {coins: 0};
            
            let isDouble = false;
            let isDeath = false;
            let score = 0;
            let result = createFirmEmbed().setTitle("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã");

            for (let i in coords) {
                const treasureIndex = treasureMap.indexOf(coords[i]);
                const treasure = treasures[treasureIndex] ?? missingTreasure;
                score += treasure.score;
                if (treasureIndex == 0) {
                    isDouble = true;
                } else if (treasureIndex == 1) {
                    isDeath = true;
                }

                result.addFields({
                    name: `${args[i].toUpperCase()} - ${treasure.icon}`,
                    value: `${treasure.name}`
                });
            }

            if (isDouble) score *= 2;
            userState.coins += score;
            
            if (isDeath) {
                userState.coins = 0;
                result.setDescription(`–¢—ã –ø–æ—Ç–µ—Ä—è–ª –≤—Å–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!`);
            } else {
                result.setDescription(`–¢—ã –ø–æ–ª—É—á–∏–ª ${score} –∫–æ–∏–Ω–æ–≤, –≤ –∏—Ç–æ–≥–µ —É —Ç–µ–±—è ${userState.coins} –∫–æ–∏–Ω–æ–≤!`);
            }

            message.client.db.data.userData[message.author.id] = userState;
            await message.client.db.write();

            await message.reply(drawMap(treasureMap));
            const resultMessage = await message.reply({ embeds: [result] });

            if (isDeath) {
                resultMessage.reply("ü§£ üëâ");
            }
        } else {
            message.reply(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –≤ \`${prefix}help th.\``)
        }
    },
};